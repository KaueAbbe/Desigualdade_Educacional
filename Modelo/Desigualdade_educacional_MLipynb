{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "16rtmWx8bNDMWhgKtctg90d1sXfyQDB98",
      "authorship_tag": "ABX9TyOtk7IckIaX7GzDx5OAes1Q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KaueAbbe/Desigualdade_Educacional/blob/main/Modelo/Desigualdade_educacional_MLipynb.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color = 'green' size = 6> Desigualdade Educacional - Modelo de Machine Learning</font>\n",
        "\n",
        "**Resumo do Projeto:**\n",
        "\n",
        "Desigualdade Educacional é uma questão social presente em todos os países, e que ocorre por diversos motivos. Entre esses motivos há diferenças econômicas, de gênero, cor de pele, geográfica. Independente do motivo, a desigualdade reflete no poder social do país, o qual é mostrado pelo índice de desenvolvimento humano e no grupo de desenvolvimento humano ao qual o país pertence.\n",
        "\n",
        "Dado este contexto, o projeto tem como motivação compreender como está e como evolui a desigualdade mundial no contexto da educação, conectando a relação de mudança na desigualdade índices de desenvolvimento do páis, e com alvo em relacionar o grupo de desenvolvimento do país com as outras variáveis.\n",
        "\n",
        "**Resumo do Notebook:**\n",
        "\n",
        "\n",
        "\n",
        "**Resumo dos Dados:**\n",
        "\n",
        "Os dados usados nesse notebook tem origem em:\n",
        "1. [Inequality in Education Around the Workd](https://www.kaggle.com/datasets/iamsouravbanerjee/inequality-in-education-around-the-world)\n",
        "2. [Humam Development Reports](https://hdr.undp.org/data-center/documentation-and-downloads)\n",
        "\n",
        "# Importar dados e Bibliotecas"
      ],
      "metadata": {
        "id": "l4qYjhw2euou"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "id": "RCxEMYwueNiB",
        "outputId": "0f931f2c-f139-4729-d0ca-29b40d9d4ba9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  ISO3       paises Human Development Groups regioes  IDH(2021)  taxa 2010  \\\n",
              "0  AFG  Afghanistan                    Baixa      SA      180.0  42.809000   \n",
              "1  ALB      Albania                     Alta     ECA       67.0  11.900000   \n",
              "2  DZA      Algeria                     Alta      AS       91.0  33.553913   \n",
              "3  AND      Andorra               Muito Alta     NaN       40.0  15.160302   \n",
              "4  AGO       Angola                    Media     SSA      148.0  34.171440   \n",
              "\n",
              "   taxa 2011  taxa 2012  taxa 2013  taxa 2014  ...  taxa 2016  taxa 2017  \\\n",
              "0  44.823380  44.823380  44.823380  44.823380  ...  45.365170  45.365170   \n",
              "1  11.900000  11.900000  11.900000  11.900000  ...  11.900000  12.333440   \n",
              "2  33.553913  33.553913  33.689560  33.689560  ...  33.689560  33.689560   \n",
              "3  15.160302  15.160302  15.160302   9.965681  ...  10.008154  10.008154   \n",
              "4  34.171440  34.171440  34.171440  34.171440  ...  34.171440  34.171440   \n",
              "\n",
              "   taxa 2018  taxa 2019  taxa 2020  taxa 2021  expectativa_vida  \\\n",
              "0  45.365170  45.365170  45.365170  45.365170           61.9824   \n",
              "1  12.333440  12.333440  12.333440  12.333440           76.4626   \n",
              "2  33.689560  33.282620  33.282620  33.282620           76.3767   \n",
              "3  10.008154  10.008154  10.008154  10.008154           80.3684   \n",
              "4  34.171440  34.171440  34.171440  34.171440           61.6434   \n",
              "\n",
              "   Anos esperado de escola  media anos de escola  taxa_aumento  \n",
              "0                10.263844              2.985070  1.437791e-01  \n",
              "1                14.448000             11.286455  5.304336e-02  \n",
              "2                14.626896              8.069284 -2.561161e-02  \n",
              "3                13.300239             10.555120 -5.762831e-01  \n",
              "4                12.172100              5.417391 -2.732857e-16  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2fc5b5d-970b-4fb9-a050-ccb7a23712c6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ISO3</th>\n",
              "      <th>paises</th>\n",
              "      <th>Human Development Groups</th>\n",
              "      <th>regioes</th>\n",
              "      <th>IDH(2021)</th>\n",
              "      <th>taxa 2010</th>\n",
              "      <th>taxa 2011</th>\n",
              "      <th>taxa 2012</th>\n",
              "      <th>taxa 2013</th>\n",
              "      <th>taxa 2014</th>\n",
              "      <th>...</th>\n",
              "      <th>taxa 2016</th>\n",
              "      <th>taxa 2017</th>\n",
              "      <th>taxa 2018</th>\n",
              "      <th>taxa 2019</th>\n",
              "      <th>taxa 2020</th>\n",
              "      <th>taxa 2021</th>\n",
              "      <th>expectativa_vida</th>\n",
              "      <th>Anos esperado de escola</th>\n",
              "      <th>media anos de escola</th>\n",
              "      <th>taxa_aumento</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Baixa</td>\n",
              "      <td>SA</td>\n",
              "      <td>180.0</td>\n",
              "      <td>42.809000</td>\n",
              "      <td>44.823380</td>\n",
              "      <td>44.823380</td>\n",
              "      <td>44.823380</td>\n",
              "      <td>44.823380</td>\n",
              "      <td>...</td>\n",
              "      <td>45.365170</td>\n",
              "      <td>45.365170</td>\n",
              "      <td>45.365170</td>\n",
              "      <td>45.365170</td>\n",
              "      <td>45.365170</td>\n",
              "      <td>45.365170</td>\n",
              "      <td>61.9824</td>\n",
              "      <td>10.263844</td>\n",
              "      <td>2.985070</td>\n",
              "      <td>1.437791e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ALB</td>\n",
              "      <td>Albania</td>\n",
              "      <td>Alta</td>\n",
              "      <td>ECA</td>\n",
              "      <td>67.0</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>...</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>12.333440</td>\n",
              "      <td>12.333440</td>\n",
              "      <td>12.333440</td>\n",
              "      <td>12.333440</td>\n",
              "      <td>12.333440</td>\n",
              "      <td>76.4626</td>\n",
              "      <td>14.448000</td>\n",
              "      <td>11.286455</td>\n",
              "      <td>5.304336e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DZA</td>\n",
              "      <td>Algeria</td>\n",
              "      <td>Alta</td>\n",
              "      <td>AS</td>\n",
              "      <td>91.0</td>\n",
              "      <td>33.553913</td>\n",
              "      <td>33.553913</td>\n",
              "      <td>33.553913</td>\n",
              "      <td>33.689560</td>\n",
              "      <td>33.689560</td>\n",
              "      <td>...</td>\n",
              "      <td>33.689560</td>\n",
              "      <td>33.689560</td>\n",
              "      <td>33.689560</td>\n",
              "      <td>33.282620</td>\n",
              "      <td>33.282620</td>\n",
              "      <td>33.282620</td>\n",
              "      <td>76.3767</td>\n",
              "      <td>14.626896</td>\n",
              "      <td>8.069284</td>\n",
              "      <td>-2.561161e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AND</td>\n",
              "      <td>Andorra</td>\n",
              "      <td>Muito Alta</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40.0</td>\n",
              "      <td>15.160302</td>\n",
              "      <td>15.160302</td>\n",
              "      <td>15.160302</td>\n",
              "      <td>15.160302</td>\n",
              "      <td>9.965681</td>\n",
              "      <td>...</td>\n",
              "      <td>10.008154</td>\n",
              "      <td>10.008154</td>\n",
              "      <td>10.008154</td>\n",
              "      <td>10.008154</td>\n",
              "      <td>10.008154</td>\n",
              "      <td>10.008154</td>\n",
              "      <td>80.3684</td>\n",
              "      <td>13.300239</td>\n",
              "      <td>10.555120</td>\n",
              "      <td>-5.762831e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AGO</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Media</td>\n",
              "      <td>SSA</td>\n",
              "      <td>148.0</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>...</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>34.171440</td>\n",
              "      <td>61.6434</td>\n",
              "      <td>12.172100</td>\n",
              "      <td>5.417391</td>\n",
              "      <td>-2.732857e-16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2fc5b5d-970b-4fb9-a050-ccb7a23712c6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a2fc5b5d-970b-4fb9-a050-ccb7a23712c6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a2fc5b5d-970b-4fb9-a050-ccb7a23712c6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-695d3c23-1080-44c7-950f-72fea74283a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-695d3c23-1080-44c7-950f-72fea74283a9')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-695d3c23-1080-44c7-950f-72fea74283a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "dados = pd.read_csv('/content/drive/MyDrive/Data Science/Projeto - Desigualdade/Desigualdade_tratado2.csv')\n",
        "dados.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Criar o modelo:\n",
        "O modelo tem como objetivo Prever qual grupo de desenvolvimento humano aquele país está.\n",
        "\n",
        "Para tal devemos lembrar:\n",
        "1. Existe muita correlação entre os dados de taxa. Podemos retirá-los, já que temos a taxa de aumento, que leva em consideração as taxas dos anos anteriores.\n",
        "2. Colunas como ISO3, países não contribuiem com informação de aprendizado.\n",
        "3. Devemos retirar todos os valores Nan\n",
        "4. Devemos realizar o OneHot-Encoding nas variáveis qualitativas\n",
        "5. Devemos realizar a normalização dos dados."
      ],
      "metadata": {
        "id": "htSB_rNno8XQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dados_modelo = dados.drop(['ISO3', 'paises'], axis = 1)\n",
        "dados_modelo.head(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "B3dhLJz1h8k8",
        "outputId": "2c401493-39ac-409e-81a6-ed4e6883b130"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Human Development Groups regioes  IDH(2021)  taxa 2010  taxa 2011  \\\n",
              "0                    Baixa      SA      180.0     42.809   44.82338   \n",
              "\n",
              "   taxa 2012  taxa 2013  taxa 2014  taxa 2015  taxa 2016  taxa 2017  \\\n",
              "0   44.82338   44.82338   44.82338   45.36517   45.36517   45.36517   \n",
              "\n",
              "   taxa 2018  taxa 2019  taxa 2020  taxa 2021  expectativa_vida  \\\n",
              "0   45.36517   45.36517   45.36517   45.36517           61.9824   \n",
              "\n",
              "   Anos esperado de escola  media anos de escola  taxa_aumento  \n",
              "0                10.263844               2.98507      0.143779  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-da57752e-6990-47c3-96e6-e8194cf46bf6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Human Development Groups</th>\n",
              "      <th>regioes</th>\n",
              "      <th>IDH(2021)</th>\n",
              "      <th>taxa 2010</th>\n",
              "      <th>taxa 2011</th>\n",
              "      <th>taxa 2012</th>\n",
              "      <th>taxa 2013</th>\n",
              "      <th>taxa 2014</th>\n",
              "      <th>taxa 2015</th>\n",
              "      <th>taxa 2016</th>\n",
              "      <th>taxa 2017</th>\n",
              "      <th>taxa 2018</th>\n",
              "      <th>taxa 2019</th>\n",
              "      <th>taxa 2020</th>\n",
              "      <th>taxa 2021</th>\n",
              "      <th>expectativa_vida</th>\n",
              "      <th>Anos esperado de escola</th>\n",
              "      <th>media anos de escola</th>\n",
              "      <th>taxa_aumento</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Baixa</td>\n",
              "      <td>SA</td>\n",
              "      <td>180.0</td>\n",
              "      <td>42.809</td>\n",
              "      <td>44.82338</td>\n",
              "      <td>44.82338</td>\n",
              "      <td>44.82338</td>\n",
              "      <td>44.82338</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>61.9824</td>\n",
              "      <td>10.263844</td>\n",
              "      <td>2.98507</td>\n",
              "      <td>0.143779</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da57752e-6990-47c3-96e6-e8194cf46bf6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-da57752e-6990-47c3-96e6-e8194cf46bf6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-da57752e-6990-47c3-96e6-e8194cf46bf6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dados_modelo = dados_modelo.drop(['taxa '+ str(x) for x in range(2010, 2021)], axis = 1)\n",
        "dados_modelo.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "VVQbyYwYqFlT",
        "outputId": "7d2c3e82-c0b3-418a-cb80-3a18e8430f6b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Human Development Groups regioes  IDH(2021)  taxa 2021  expectativa_vida  \\\n",
              "0                    Baixa      SA      180.0   45.36517           61.9824   \n",
              "1                     Alta     ECA       67.0   12.33344           76.4626   \n",
              "\n",
              "   Anos esperado de escola  media anos de escola  taxa_aumento  \n",
              "0                10.263844              2.985070      0.143779  \n",
              "1                14.448000             11.286455      0.053043  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46966706-2b57-461d-ae98-dcc362d7f0d2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Human Development Groups</th>\n",
              "      <th>regioes</th>\n",
              "      <th>IDH(2021)</th>\n",
              "      <th>taxa 2021</th>\n",
              "      <th>expectativa_vida</th>\n",
              "      <th>Anos esperado de escola</th>\n",
              "      <th>media anos de escola</th>\n",
              "      <th>taxa_aumento</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Baixa</td>\n",
              "      <td>SA</td>\n",
              "      <td>180.0</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>61.9824</td>\n",
              "      <td>10.263844</td>\n",
              "      <td>2.985070</td>\n",
              "      <td>0.143779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alta</td>\n",
              "      <td>ECA</td>\n",
              "      <td>67.0</td>\n",
              "      <td>12.33344</td>\n",
              "      <td>76.4626</td>\n",
              "      <td>14.448000</td>\n",
              "      <td>11.286455</td>\n",
              "      <td>0.053043</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46966706-2b57-461d-ae98-dcc362d7f0d2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46966706-2b57-461d-ae98-dcc362d7f0d2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46966706-2b57-461d-ae98-dcc362d7f0d2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f82232c-8a30-4871-9d24-769396751c71\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f82232c-8a30-4871-9d24-769396751c71')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f82232c-8a30-4871-9d24-769396751c71 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dados_modelo.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bLt_0WeaqP9_",
        "outputId": "db8675cd-cf03-4c79-9d6a-9ac53c416315"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 182 entries, 0 to 181\n",
            "Data columns (total 8 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Human Development Groups  181 non-null    object \n",
            " 1   regioes                   140 non-null    object \n",
            " 2   IDH(2021)                 181 non-null    float64\n",
            " 3   taxa 2021                 182 non-null    float64\n",
            " 4   expectativa_vida          169 non-null    float64\n",
            " 5   Anos esperado de escola   169 non-null    float64\n",
            " 6   media anos de escola      169 non-null    float64\n",
            " 7   taxa_aumento              182 non-null    float64\n",
            "dtypes: float64(6), object(2)\n",
            "memory usage: 11.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dados_modelo = dados_modelo.dropna()\n",
        "dados_modelo.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0vCMCc51qyfk",
        "outputId": "cc89803d-9db6-4105-c1cb-8236521bab80"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 129 entries, 0 to 181\n",
            "Data columns (total 8 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Human Development Groups  129 non-null    object \n",
            " 1   regioes                   129 non-null    object \n",
            " 2   IDH(2021)                 129 non-null    float64\n",
            " 3   taxa 2021                 129 non-null    float64\n",
            " 4   expectativa_vida          129 non-null    float64\n",
            " 5   Anos esperado de escola   129 non-null    float64\n",
            " 6   media anos de escola      129 non-null    float64\n",
            " 7   taxa_aumento              129 non-null    float64\n",
            "dtypes: float64(6), object(2)\n",
            "memory usage: 9.1+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dados_modelo = pd.get_dummies(dados_modelo, columns=['regioes'])\n",
        "dados_modelo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "wVAT8m6Fq5eM",
        "outputId": "9f559a1f-854a-47db-f9b3-bd1a58c1017f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Human Development Groups  IDH(2021)  taxa 2021  expectativa_vida  \\\n",
              "0                      Baixa      180.0   45.36517           61.9824   \n",
              "1                       Alta       67.0   12.33344           76.4626   \n",
              "2                       Alta       91.0   33.28262           76.3767   \n",
              "4                      Media      148.0   34.17144           61.6434   \n",
              "5                 Muito Alta       47.0    5.78729           75.3899   \n",
              "..                       ...        ...        ...               ...   \n",
              "176                    Media      140.0   17.49305           70.4490   \n",
              "178                     Alta      115.0   15.25479           73.6181   \n",
              "179                    Baixa      183.0   46.13765           63.7534   \n",
              "180                    Media      154.0   20.43572           61.2234   \n",
              "181                    Media      146.0   14.60503           59.2531   \n",
              "\n",
              "     Anos esperado de escola  media anos de escola  taxa_aumento  regioes_AS  \\\n",
              "0                  10.263844              2.985070  1.437791e-01           0   \n",
              "1                  14.448000             11.286455  5.304336e-02           0   \n",
              "2                  14.626896              8.069284 -2.561161e-02           1   \n",
              "4                  12.172100              5.417391 -2.732857e-16           0   \n",
              "5                  17.874870             11.147269 -1.022072e-01           0   \n",
              "..                       ...                   ...           ...         ...   \n",
              "176                11.535315              7.064846  2.484415e-16           0   \n",
              "178                12.951932              8.370280 -4.801217e-02           0   \n",
              "179                 9.098710              3.200000 -1.843241e-01           1   \n",
              "180                10.928760              7.187091 -3.719474e-01           0   \n",
              "181                12.110969              8.710909 -3.279851e-01           0   \n",
              "\n",
              "     regioes_EAP  regioes_ECA  regioes_LAC  regioes_SA  regioes_SSA  \n",
              "0              0            0            0           1            0  \n",
              "1              0            1            0           0            0  \n",
              "2              0            0            0           0            0  \n",
              "4              0            0            0           0            1  \n",
              "5              0            0            1           0            0  \n",
              "..           ...          ...          ...         ...          ...  \n",
              "176            1            0            0           0            0  \n",
              "178            1            0            0           0            0  \n",
              "179            0            0            0           0            0  \n",
              "180            0            0            0           0            1  \n",
              "181            0            0            0           0            1  \n",
              "\n",
              "[129 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b4087121-9b31-4ae9-895e-af9ae56e80a3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Human Development Groups</th>\n",
              "      <th>IDH(2021)</th>\n",
              "      <th>taxa 2021</th>\n",
              "      <th>expectativa_vida</th>\n",
              "      <th>Anos esperado de escola</th>\n",
              "      <th>media anos de escola</th>\n",
              "      <th>taxa_aumento</th>\n",
              "      <th>regioes_AS</th>\n",
              "      <th>regioes_EAP</th>\n",
              "      <th>regioes_ECA</th>\n",
              "      <th>regioes_LAC</th>\n",
              "      <th>regioes_SA</th>\n",
              "      <th>regioes_SSA</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Baixa</td>\n",
              "      <td>180.0</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>61.9824</td>\n",
              "      <td>10.263844</td>\n",
              "      <td>2.985070</td>\n",
              "      <td>1.437791e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alta</td>\n",
              "      <td>67.0</td>\n",
              "      <td>12.33344</td>\n",
              "      <td>76.4626</td>\n",
              "      <td>14.448000</td>\n",
              "      <td>11.286455</td>\n",
              "      <td>5.304336e-02</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Alta</td>\n",
              "      <td>91.0</td>\n",
              "      <td>33.28262</td>\n",
              "      <td>76.3767</td>\n",
              "      <td>14.626896</td>\n",
              "      <td>8.069284</td>\n",
              "      <td>-2.561161e-02</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Media</td>\n",
              "      <td>148.0</td>\n",
              "      <td>34.17144</td>\n",
              "      <td>61.6434</td>\n",
              "      <td>12.172100</td>\n",
              "      <td>5.417391</td>\n",
              "      <td>-2.732857e-16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Muito Alta</td>\n",
              "      <td>47.0</td>\n",
              "      <td>5.78729</td>\n",
              "      <td>75.3899</td>\n",
              "      <td>17.874870</td>\n",
              "      <td>11.147269</td>\n",
              "      <td>-1.022072e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>Media</td>\n",
              "      <td>140.0</td>\n",
              "      <td>17.49305</td>\n",
              "      <td>70.4490</td>\n",
              "      <td>11.535315</td>\n",
              "      <td>7.064846</td>\n",
              "      <td>2.484415e-16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>Alta</td>\n",
              "      <td>115.0</td>\n",
              "      <td>15.25479</td>\n",
              "      <td>73.6181</td>\n",
              "      <td>12.951932</td>\n",
              "      <td>8.370280</td>\n",
              "      <td>-4.801217e-02</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>Baixa</td>\n",
              "      <td>183.0</td>\n",
              "      <td>46.13765</td>\n",
              "      <td>63.7534</td>\n",
              "      <td>9.098710</td>\n",
              "      <td>3.200000</td>\n",
              "      <td>-1.843241e-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>Media</td>\n",
              "      <td>154.0</td>\n",
              "      <td>20.43572</td>\n",
              "      <td>61.2234</td>\n",
              "      <td>10.928760</td>\n",
              "      <td>7.187091</td>\n",
              "      <td>-3.719474e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>181</th>\n",
              "      <td>Media</td>\n",
              "      <td>146.0</td>\n",
              "      <td>14.60503</td>\n",
              "      <td>59.2531</td>\n",
              "      <td>12.110969</td>\n",
              "      <td>8.710909</td>\n",
              "      <td>-3.279851e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>129 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4087121-9b31-4ae9-895e-af9ae56e80a3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b4087121-9b31-4ae9-895e-af9ae56e80a3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b4087121-9b31-4ae9-895e-af9ae56e80a3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3d2ee10f-9b6f-4c7e-b40c-381551300113\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3d2ee10f-9b6f-4c7e-b40c-381551300113')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3d2ee10f-9b6f-4c7e-b40c-381551300113 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Verificação dos dados"
      ],
      "metadata": {
        "id": "dz4SlMEYA7Iy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dados_modelo['Human Development Groups'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tpDIAnIzA6GU",
        "outputId": "cda67fab-fc49-4cb1-e308-13f8657e3b9c"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Alta          41\n",
              "Media         37\n",
              "Baixa         29\n",
              "Muito Alta    22\n",
              "Name: Human Development Groups, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, precision_score, confusion_matrix\n",
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.model_selection import KFold"
      ],
      "metadata": {
        "id": "853P6vrqrrPp"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.dummy import DummyClassifier"
      ],
      "metadata": {
        "id": "-Um4c_OBu5Ke"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = dados_modelo.drop(columns=['Human Development Groups'], axis =1 )\n",
        "y = dados_modelo['Human Development Groups']"
      ],
      "metadata": {
        "id": "3H-1aoRfu-Fo"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "id": "4M20Ba-kvNuz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "1b6436b1-42cb-4570-b825-81a4dda08415"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     IDH(2021)  taxa 2021  expectativa_vida  Anos esperado de escola  \\\n",
              "0        180.0   45.36517           61.9824                10.263844   \n",
              "1         67.0   12.33344           76.4626                14.448000   \n",
              "2         91.0   33.28262           76.3767                14.626896   \n",
              "4        148.0   34.17144           61.6434                12.172100   \n",
              "5         47.0    5.78729           75.3899                17.874870   \n",
              "..         ...        ...               ...                      ...   \n",
              "176      140.0   17.49305           70.4490                11.535315   \n",
              "178      115.0   15.25479           73.6181                12.951932   \n",
              "179      183.0   46.13765           63.7534                 9.098710   \n",
              "180      154.0   20.43572           61.2234                10.928760   \n",
              "181      146.0   14.60503           59.2531                12.110969   \n",
              "\n",
              "     media anos de escola  taxa_aumento  regioes_AS  regioes_EAP  regioes_ECA  \\\n",
              "0                2.985070  1.437791e-01           0            0            0   \n",
              "1               11.286455  5.304336e-02           0            0            1   \n",
              "2                8.069284 -2.561161e-02           1            0            0   \n",
              "4                5.417391 -2.732857e-16           0            0            0   \n",
              "5               11.147269 -1.022072e-01           0            0            0   \n",
              "..                    ...           ...         ...          ...          ...   \n",
              "176              7.064846  2.484415e-16           0            1            0   \n",
              "178              8.370280 -4.801217e-02           0            1            0   \n",
              "179              3.200000 -1.843241e-01           1            0            0   \n",
              "180              7.187091 -3.719474e-01           0            0            0   \n",
              "181              8.710909 -3.279851e-01           0            0            0   \n",
              "\n",
              "     regioes_LAC  regioes_SA  regioes_SSA  \n",
              "0              0           1            0  \n",
              "1              0           0            0  \n",
              "2              0           0            0  \n",
              "4              0           0            1  \n",
              "5              1           0            0  \n",
              "..           ...         ...          ...  \n",
              "176            0           0            0  \n",
              "178            0           0            0  \n",
              "179            0           0            0  \n",
              "180            0           0            1  \n",
              "181            0           0            1  \n",
              "\n",
              "[129 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e9d5a67b-ed89-4de6-aecf-87ae72bdbc60\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDH(2021)</th>\n",
              "      <th>taxa 2021</th>\n",
              "      <th>expectativa_vida</th>\n",
              "      <th>Anos esperado de escola</th>\n",
              "      <th>media anos de escola</th>\n",
              "      <th>taxa_aumento</th>\n",
              "      <th>regioes_AS</th>\n",
              "      <th>regioes_EAP</th>\n",
              "      <th>regioes_ECA</th>\n",
              "      <th>regioes_LAC</th>\n",
              "      <th>regioes_SA</th>\n",
              "      <th>regioes_SSA</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>180.0</td>\n",
              "      <td>45.36517</td>\n",
              "      <td>61.9824</td>\n",
              "      <td>10.263844</td>\n",
              "      <td>2.985070</td>\n",
              "      <td>1.437791e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>67.0</td>\n",
              "      <td>12.33344</td>\n",
              "      <td>76.4626</td>\n",
              "      <td>14.448000</td>\n",
              "      <td>11.286455</td>\n",
              "      <td>5.304336e-02</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>91.0</td>\n",
              "      <td>33.28262</td>\n",
              "      <td>76.3767</td>\n",
              "      <td>14.626896</td>\n",
              "      <td>8.069284</td>\n",
              "      <td>-2.561161e-02</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>148.0</td>\n",
              "      <td>34.17144</td>\n",
              "      <td>61.6434</td>\n",
              "      <td>12.172100</td>\n",
              "      <td>5.417391</td>\n",
              "      <td>-2.732857e-16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>47.0</td>\n",
              "      <td>5.78729</td>\n",
              "      <td>75.3899</td>\n",
              "      <td>17.874870</td>\n",
              "      <td>11.147269</td>\n",
              "      <td>-1.022072e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>140.0</td>\n",
              "      <td>17.49305</td>\n",
              "      <td>70.4490</td>\n",
              "      <td>11.535315</td>\n",
              "      <td>7.064846</td>\n",
              "      <td>2.484415e-16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>115.0</td>\n",
              "      <td>15.25479</td>\n",
              "      <td>73.6181</td>\n",
              "      <td>12.951932</td>\n",
              "      <td>8.370280</td>\n",
              "      <td>-4.801217e-02</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>183.0</td>\n",
              "      <td>46.13765</td>\n",
              "      <td>63.7534</td>\n",
              "      <td>9.098710</td>\n",
              "      <td>3.200000</td>\n",
              "      <td>-1.843241e-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>154.0</td>\n",
              "      <td>20.43572</td>\n",
              "      <td>61.2234</td>\n",
              "      <td>10.928760</td>\n",
              "      <td>7.187091</td>\n",
              "      <td>-3.719474e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>181</th>\n",
              "      <td>146.0</td>\n",
              "      <td>14.60503</td>\n",
              "      <td>59.2531</td>\n",
              "      <td>12.110969</td>\n",
              "      <td>8.710909</td>\n",
              "      <td>-3.279851e-01</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>129 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9d5a67b-ed89-4de6-aecf-87ae72bdbc60')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e9d5a67b-ed89-4de6-aecf-87ae72bdbc60 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e9d5a67b-ed89-4de6-aecf-87ae72bdbc60');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fe453f35-a348-4412-b8f3-b224fc2ad668\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe453f35-a348-4412-b8f3-b224fc2ad668')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fe453f35-a348-4412-b8f3-b224fc2ad668 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "id": "sgsbHxLCvNpJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aa488a13-82c5-4452-9632-a17beeca9eb7"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0           Baixa\n",
              "1            Alta\n",
              "2            Alta\n",
              "4           Media\n",
              "5      Muito Alta\n",
              "          ...    \n",
              "176         Media\n",
              "178          Alta\n",
              "179         Baixa\n",
              "180         Media\n",
              "181         Media\n",
              "Name: Human Development Groups, Length: 129, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Separar em treino e teste, e escalonar os dados."
      ],
      "metadata": {
        "id": "lKyyXmugxuJE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "scaler.fit(X)\n",
        "X = scaler.transform(X)\n",
        "X[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_fztqklHxPgJ",
        "outputId": "ab2577c9-b83f-4fa2-9538-83b322d197ad"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.41238889,  1.60625386, -1.04885272, -0.95343906, -1.69831752,\n",
              "         0.73080693, -0.40269363, -0.44095855, -0.36273813, -0.51449576,\n",
              "         3.8890873 , -0.67040152],\n",
              "       [-1.12187906, -0.70091029,  1.20458783,  0.78787138,  1.13512428,\n",
              "         0.51965633, -0.40269363, -0.44095855,  2.75680975, -0.51449576,\n",
              "        -0.25712974, -0.67040152],\n",
              "       [-0.58362746,  0.76232512,  1.19121989,  0.86232214,  0.03703454,\n",
              "         0.3366189 ,  2.4832774 , -0.44095855, -0.36273813, -0.51449576,\n",
              "        -0.25712974, -0.67040152],\n",
              "       [ 0.69472009,  0.82440645, -1.10160864, -0.1592846 , -0.86811395,\n",
              "         0.3962195 , -0.40269363, -0.44095855, -0.36273813, -0.51449576,\n",
              "        -0.25712974,  1.49164339],\n",
              "       [-1.57042206, -1.15813862,  1.0376519 ,  2.21402402,  1.08761718,\n",
              "         0.15837373, -0.40269363, -0.44095855, -0.36273813,  1.94365063,\n",
              "        -0.25712974, -0.67040152]])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import RandomOverSampler\n",
        "ros = RandomOverSampler(random_state=0)\n",
        "X, y = ros.fit_resample(X, y)"
      ],
      "metadata": {
        "id": "IMb7eOuaA6EH"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Separar o treino para validação\n",
        "\n"
      ],
      "metadata": {
        "id": "oh_MLYTe-Xf7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_treino, X_val, y_treino, y_val = train_test_split(X, y, test_size=0.12, random_state=42) # Reservei 30% pra validação"
      ],
      "metadata": {
        "id": "aIRKuiAt-Fld"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_treino, X_test, y_treino, y_test = train_test_split(X_treino, y_treino, test_size=0.2, random_state=42) # 25% dos 70% de treino virará teste"
      ],
      "metadata": {
        "id": "qyhctUUz-Fjo"
      },
      "execution_count": 184,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_treino.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "--F1wWzu91Fs",
        "outputId": "d553acd4-7a1a-40e3-d88a-04a5b3dc453c"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(115, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 185
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YTNP4kbg-aNM",
        "outputId": "8a508f4f-ee46-407c-dd58-8b89de4d9cb3"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(29, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_val.shape"
      ],
      "metadata": {
        "id": "xofBn4Cl_eEC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "601ad0e5-d606-462b-b767-30975092e3ad"
      },
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(20, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 187
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Modelos\n",
        "1. Vou usar o [Cross_validate](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_validate.html) para conseguir fazer validação cruzada, e saber o intervalo de acerto do modelo.\n",
        "2. Foi usar o [KFold](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html#sklearn.model_selection.KFold) como cross_validator.\n",
        "3. As métricas usadas serão [Acurácia](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html#sklearn.metrics.accuracy_score) para avaliar quão bem o modelo está. E [precisão](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html#sklearn.metrics.precision_score) para diminuir os falsos positivos.\n",
        "4. A [matrix confusão](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html#sklearn.metrics.confusion_matrix) será usada para verificar quais erros os modelos têm.\n",
        "5. Será utilizado métrica sobre dados de validação. Os dados de validação analisam como o modelo responde à dados nunca vistos. **Esta informação será de muita importância para conclusão de qual modelo otimizar.**\n",
        "\n"
      ],
      "metadata": {
        "id": "y79ATpG1xyEp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def treinando_cv(modelo, x, y, cv, teste = False): #Serve para treinar os modelos e avaliar quais sãos os que melhores se encaixam com o problema.\n",
        "  results = cross_validate(modelo, x, y, cv = cv,  return_train_score=teste)\n",
        "  media = results['test_score'].mean()\n",
        "  std = results['test_score'].std()\n",
        "  print('acuracia media: [%.2f]'%( media*100))\n",
        "  print('acuracia intervalo: [%.2f, %.2f]'%( (media-2*std)*100, (media+2*std)*100))\n",
        "  if teste == True:\n",
        "    media_treino = results['train_score'].mean()\n",
        "    print('acuracia media treino: [%.2f]'%( media_treino*100))\n",
        "\n",
        "  return results\n",
        "\n",
        "def metricas(modelo): # Servem para fazer avaliações do melhor modelo, principalmente em momento de melhorar os hiperparâmetros\n",
        "  modelo.fit(X_treino, y_treino)\n",
        "  y_pred = modelo.predict(X_test)\n",
        "  accuracy = accuracy_score(y_test, y_pred)\n",
        "  precisao = precision_score(y_test, y_pred, average = 'micro')\n",
        "  matriz = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "  print(f\"Acurácia: {accuracy:.2f}\")\n",
        "  print(f\"Precisão: {precisao:.2f}\")\n",
        "\n",
        "  #print(matriz)\n",
        "  plt.figure(figsize=(8, 6))\n",
        "  sns.set(font_scale=1.4)  # Ajusta o tamanho da fonte\n",
        "  sns.heatmap(matriz, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
        "              xticklabels=[\"Baixo\", \"Alto\", \"Medio\", \"Muito Alto\"],\n",
        "              yticklabels=[\"Baixo\", \"Alto\", \"Medio\", \"Muito Alto\"])\n",
        "\n",
        "  # Configuração de rótulos\n",
        "  plt.xlabel('Valores Previstos')\n",
        "  plt.ylabel('Valores Reais')\n",
        "  plt.title('Matriz de Confusão')\n",
        "  plt.show()\n",
        "\n",
        "\n",
        "def validar(modelo):  # Serve para validação final\n",
        "  y_pred = modelo.predict(X_val)\n",
        "  accuracy = accuracy_score(y_val, y_pred)\n",
        "  precisao = precision_score(y_val, y_pred, average = 'micro')\n",
        "  matriz = confusion_matrix(y_val, y_pred)\n",
        "\n",
        "  print(f\"Acurácia Validação: {accuracy:.2f}\")\n",
        "  print(f\"Precisão Validação: {precisao:.2f}\")\n",
        "\n"
      ],
      "metadata": {
        "id": "d8vZTDnwyYq1"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv = KFold(n_splits = 5, shuffle = True, random_state = 42)"
      ],
      "metadata": {
        "id": "YBwcLCsAzzP5"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dummy\n",
        "\n",
        "O modelo Dummy tem acurácia de 25%.\n",
        "\n",
        "A baseline aqui será adotada como 25%"
      ],
      "metadata": {
        "id": "uPnxL6Y3Mzqz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dummy_model = DummyClassifier(strategy=\"uniform\", random_state = 42)  # Estratégia de previsão uniforme\n",
        "treinando_cv(dummy_model, X, y, cv)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wsnb9xFZz58z",
        "outputId": "304faba6-46fc-4381-de18-3376387ca8e3"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [25.07]\n",
            "acuracia intervalo: [2.33, 47.81]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'fit_time': array([0.0011344 , 0.00124002, 0.00053811, 0.00046873, 0.0005455 ,\n",
              "        0.00045538, 0.00047088, 0.0004673 , 0.00047803, 0.00044084]),\n",
              " 'score_time': array([0.00361347, 0.00162387, 0.00093818, 0.00087142, 0.00085235,\n",
              "        0.00083232, 0.00084496, 0.00088549, 0.00087881, 0.00082684]),\n",
              " 'test_score': array([0.11764706, 0.23529412, 0.23529412, 0.29411765, 0.0625    ,\n",
              "        0.375     , 0.375     , 0.4375    , 0.1875    , 0.1875    ])}"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## LinearSVM\n",
        "\n",
        "Acurácia Média do Modelo: 79%"
      ],
      "metadata": {
        "id": "iwy_UNZXyRCa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def treinando(modelo):\n",
        "  modelo.fit(X_treino, y_treino)\n",
        "  y_pred = modelo.predict(X_test)\n",
        "  accuracy = accuracy_score(y_test, y_pred)\n",
        "  print(f\"Acurácia do modelo: {accuracy:.2f}\")"
      ],
      "metadata": {
        "id": "4zgRusZw1kQJ"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import LinearSVC\n",
        "modelo_svc = LinearSVC(random_state = 42)\n",
        "treinando(modelo_svc)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ifZjfAO9vfLa",
        "outputId": "e1e30b9f-1a50-4461-e6f3-1e893d97e30b"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Acurácia do modelo: 0.79\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cv2 = KFold(n_splits = 10, shuffle = True, random_state = 42)\n",
        "treinando_cv(modelo_svc, X_treino, y_treino, cv2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G3-BTVWOyt0A",
        "outputId": "d5624318-b006-4855-f4a2-ea3eb2155058"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [71.67]\n",
            "acuracia intervalo: [33.75, 109.58]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'fit_time': array([0.02305126, 0.01134872, 0.01090884, 0.00984144, 0.01011539,\n",
              "        0.01009345, 0.00938463, 0.01254106, 0.01249337, 0.01159835]),\n",
              " 'score_time': array([0.0017426 , 0.00169611, 0.00172257, 0.00158119, 0.00149274,\n",
              "        0.00177169, 0.00229883, 0.00170493, 0.00194573, 0.00156021]),\n",
              " 'test_score': array([0.58333333, 0.75      , 0.91666667, 0.75      , 0.75      ,\n",
              "        0.91666667, 0.5       , 0.63636364, 0.36363636, 1.        ])}"
            ]
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## SVC\n",
        "\n",
        "Acurária 81.08%"
      ],
      "metadata": {
        "id": "iSYTUwrh20h3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "SVC_model = SVC()\n",
        "treinando_cv(SVC_model, X_treino, y_treino, cv, teste = True)\n",
        "\n",
        "scores = cross_val_score(SVC_model, X_test, y_test, cv = KFold(n_splits=5, shuffle=True))\n",
        "print(f'Media: {round(scores.mean()*100, 2)} \\n Desvio: {round(scores.std()*100, 2)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mnIGU18_2QiL",
        "outputId": "f19d7474-b10d-4662-c7f3-72c0a7214dd7"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [81.12]\n",
            "acuracia intervalo: [60.64, 101.61]\n",
            "acuracia media treino: [90.38]\n",
            "Media: 63.33 \n",
            " Desvio: 12.47\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## K-Neighbors\n",
        "\n",
        "Acurácia Média: 74.96%"
      ],
      "metadata": {
        "id": "GRwAuJZk3_dV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "KN_model = KNeighborsClassifier()\n",
        "treinando_cv(KN_model, X_treino, y_treino, cv, teste = True)\n",
        "\n",
        "scores = cross_val_score(KN_model, X_test, y_test, cv = KFold(n_splits=5, shuffle=True))\n",
        "print(f'Media: {round(scores.mean()*100, 2)} \\n Desvio: {round(scores.std()*100, 2)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rRHkImDa3E3O",
        "outputId": "a2ab6865-c9d1-43f1-ada2-c368795b443b"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [75.94]\n",
            "acuracia intervalo: [46.92, 104.96]\n",
            "acuracia media treino: [80.76]\n",
            "Media: 73.33 \n",
            " Desvio: 8.16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Naive\n",
        "\n",
        "Teve erro porque recebeu valores negativos, e ele não aceita."
      ],
      "metadata": {
        "id": "us2FQ5Ip4bO8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import MultinomialNB\n",
        "NB_model = MultinomialNB()\n",
        "treinando_cv(NB_model, X, y, cv, teste = True)"
      ],
      "metadata": {
        "id": "dPLToVwe4H1f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Gradient Boosting\n",
        "Acurácia Média: 98.77%"
      ],
      "metadata": {
        "id": "9RuiJmOb5IXH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "GB_model = GradientBoostingClassifier()\n",
        "resultados = treinando_cv(GB_model, X_treino, y_treino, cv, teste = True)\n",
        "\n",
        "scores = cross_val_score(GB_model, X_test, y_test, cv = KFold(n_splits=5, shuffle=True))\n",
        "print(f'Media: {round(scores.mean()*100, 2)} \\n Desvio: {round(scores.std()*100, 2)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dIfrve1K4e2x",
        "outputId": "ac5f885f-cf01-4325-c729-7ebf6cd12d35"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [96.52]\n",
            "acuracia intervalo: [90.01, 103.03]\n",
            "acuracia media treino: [100.00]\n",
            "Media: 86.67 \n",
            " Desvio: 12.47\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "resultados"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VvH8g4OR_nQW",
        "outputId": "c266d64b-e25a-4a2d-e94a-115eda882a33"
      },
      "execution_count": 171,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'fit_time': array([0.51710367, 0.50896335, 0.49959159, 0.50121856, 0.48494673]),\n",
              " 'score_time': array([0.00276589, 0.00208378, 0.00211692, 0.00209951, 0.00212717]),\n",
              " 'test_score': array([1.        , 1.        , 0.95652174, 0.91304348, 0.95652174]),\n",
              " 'train_score': array([1., 1., 1., 1., 1.])}"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Árvore de Decisão\n",
        "Acurácia Media: 97.77%"
      ],
      "metadata": {
        "id": "PrN3hIA37M9I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "SEED = 42\n",
        "np.random.seed(SEED)\n",
        "\n",
        "DT_model = DecisionTreeClassifier()\n",
        "resultados = treinando_cv(DT_model, X_treino, y_treino, cv, teste = True)\n",
        "\n",
        "\n",
        "scores = cross_val_score(DT_model, X_test, y_test, cv = KFold(n_splits=5, shuffle=True))\n",
        "print(f'Media: {round(scores.mean()*100, 2)} \\n Desvio: {round(scores.std()*100, 2)}')"
      ],
      "metadata": {
        "id": "X0wsRzc25MiN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "685fd8c6-8eb0-4bba-b689-ed1b2d97c320"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [98.26]\n",
            "acuracia intervalo: [94.00, 102.52]\n",
            "acuracia media treino: [100.00]\n",
            "Media: 78.67 \n",
            " Desvio: 9.33\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Observações\n",
        "Apesar do resultado ser digno de mais verificações os resultados do DecisionTree e GradientBoosting estão perfeitos no caso da validação. Além disso, ambos estão com resultados idênticos.\n",
        "\n",
        "O meu objetivo agora é realizar a otimização do modelo de DecisionTree, com finalidade de melhorar o treino e diminuir o intervalos de acurácia.\n",
        "\n",
        "* A utilização da testagem do modelo mostra que o modelo não está sofrendo de overfittig, já que as acurácias são estatísticamento iguais.\n"
      ],
      "metadata": {
        "id": "uBJr78okDKSj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Otimizando o DecisionTree - Hiperparâmetros\n",
        "\n",
        "A otimização tem como objetivo encontrar o melhor conjunto de hiperparâmetros.\n",
        "Objetivo desejado é diminuir o desvio padrão"
      ],
      "metadata": {
        "id": "gDStn0pbDKQR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "espaco_paramentros = {\n",
        "    \"criterion\": [\"gini\", \"entropy\", \"log_loss\"],\n",
        "    \"max_depth\": [3, 4, 5, 6, 7, 8, 9],\n",
        "    \"min_samples_split\":[2, 3, 4,5],\n",
        "    \"min_samples_leaf\": [1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
        "    \"splitter\":[\"best\", \"random\"]\n",
        "\n",
        "\n",
        "}\n",
        "\n",
        "busca = GridSearchCV(DecisionTreeClassifier(),\n",
        "                     espaco_paramentros,\n",
        "                     cv = KFold(n_splits = 10))\n",
        "\n",
        "busca.fit(X_treino, y_treino)\n",
        "resultados = pd.DataFrame(busca.cv_results_)\n",
        "\n",
        "print(busca.best_params_)\n",
        "print(busca.best_score_ * 100)\n",
        "\n",
        "\n",
        "scores = cross_val_score(busca, X_test, y_test, cv = KFold(n_splits=5, shuffle=True))\n",
        "print(f'Media: {round(scores.mean()*100, 2)} \\n Desvio: {round(scores.std()*100, 2)}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5G5bmW0-9bI_",
        "outputId": "a413c4d0-57fe-4b1c-e33e-bb12bed28654"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'criterion': 'gini', 'max_depth': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}\n",
            "98.33333333333334\n",
            "Media: 82.0 \n",
            " Desvio: 16.55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Neste resultado noto que a média do teste é de 90% de acurácia, mas com 13% de desvio padrão, o que torna um alto desvio padrão."
      ],
      "metadata": {
        "id": "nI_eOm5Ac0wN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "espaco_paramentros = {\n",
        "    \"criterion\": [\"gini\", \"entropy\", \"log_loss\"],\n",
        "    \"max_depth\": [3, 4, 5, 6, 7, 8, 9],\n",
        "    \"min_samples_split\":[2, 5, 10,15, 20],\n",
        "    \"min_samples_leaf\": [32, 16, 8, 4, 2]\n",
        "}\n",
        "\n",
        "busca = RandomizedSearchCV(DecisionTreeClassifier(),\n",
        "                     espaco_paramentros,\n",
        "                     cv = KFold(n_splits = 10))\n",
        "\n",
        "\n",
        "busca.fit(X_treino, y_treino)\n",
        "resultados = pd.DataFrame(busca.cv_results_)\n",
        "\n",
        "print(busca.best_params_)\n",
        "print(busca.best_score_ * 100)\n",
        "\n",
        "scores = cross_val_score(busca, X_test, y_test, cv = KFold(n_splits=5, shuffle=True))\n",
        "print(f'Media: {round(scores.mean()*100, 2)} \\n Desvio: {round(scores.std()*100, 2)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rv5DXZzxF5P5",
        "outputId": "470cb768-b63e-4d87-9cc0-da5f2987783b"
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'min_samples_split': 5, 'min_samples_leaf': 16, 'max_depth': 4, 'criterion': 'entropy'}\n",
            "98.33333333333334\n",
            "Media: 76.0 \n",
            " Desvio: 22.45\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* modelo final o dado pelo GridSearchCV:\n",
        "'criterion': 'gini', 'max_depth': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'\n",
        "\n",
        "**No entanto**\n",
        "* O modelo todo no Default do DecisionTreeClassifier apresentou melhores resultados, tanto em média como em desvio padrão."
      ],
      "metadata": {
        "id": "ys5F5CH5JyXt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "SEED = 42\n",
        "np.random.seed(SEED)\n",
        "\n",
        "DT_model = DecisionTreeClassifier()\n",
        "resultados = treinando_cv(DT_model, X_treino, y_treino, cv, teste = True)\n",
        "\n",
        "\n",
        "scores = cross_val_score(DT_model, X_test, y_test, cv = KFold(n_splits=5, shuffle=True))\n",
        "print(f'Media: {round(scores.mean()*100, 2)} \\n Desvio: {round(scores.std()*100, 2)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mm3rYap6doFa",
        "outputId": "d6610764-151b-471e-f80c-d180a482be9e"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [98.26]\n",
            "acuracia intervalo: [94.00, 102.52]\n",
            "acuracia media treino: [100.00]\n",
            "Media: 78.67 \n",
            " Desvio: 9.33\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Validação Final"
      ],
      "metadata": {
        "id": "RyM0ZNBrKEmj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "SEED = 42\n",
        "np.random.seed(SEED)\n",
        "\n",
        "DT_model = DecisionTreeClassifier()\n",
        "resultados = treinando_cv(DT_model, X_treino, y_treino, cv, teste = True)\n",
        "metricas(DT_model)\n",
        "\n",
        "validar(DT_model)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 709
        },
        "id": "Hau2xEueGUvC",
        "outputId": "18848a3f-aff6-4ec3-c139-62cf51961208"
      },
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acuracia media: [98.26]\n",
            "acuracia intervalo: [94.00, 102.52]\n",
            "acuracia media treino: [100.00]\n",
            "Acurácia: 0.97\n",
            "Precisão: 0.97\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Acurácia Validação: 1.00\n",
            "Precisão Validação: 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "O molelo apresentou como acurácia e precisão na validação os resultados:\n",
        "\n",
        "Acurácia: 100%\n",
        "\n",
        "Precisão: 100%\n",
        "\n",
        "Para obter melhores resultados, afim de avaliar onde o modelos erraria é preciso ter mais dados, com mais variabilidade."
      ],
      "metadata": {
        "id": "6E9z4HeteO3p"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zbMRlaeRKKDK"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
